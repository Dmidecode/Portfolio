<Card @onclick="OnClickedCell" Class="@GetCssCell()" Style="@cardCss" @oncontextmenu="(() => HandleRightClick())" @onmouseup="OnClickedCell">
    @if (Status > StatusCell.Empty)
    {
        <Image Source="@currentIcon" Style="width: 30px; height: 30px;" />
    }
</Card>

@code {

    const int widthCss = 50;
    const int heightCss = 50;
    string cardCss = $"background-color: #f7f9fc;border: 1px solid #000000; width: {widthCss}px; height: {heightCss}px; padding-left: 9px !important; padding-top: 9px;";
    string hoverClassCss = "card-base";

    const string circleIcon = "images/Circle.png";
    const string crossIcon = "images/Cross.png";
    string currentIcon;

    string classCss = "display-products";

    [Parameter]
    public EventCallback<(int, int)> OnCallbackParentMiddleCLick { get; set; }

    [Parameter]
    public EventCallback<(int, int)> OnCallbackParent { get; set; }

    [Parameter]
    public EventCallback<(int, int)> OnCallbackParentRightClick { get; set; }

    [Parameter]
    public int X { get; set; }

    [Parameter]
    public int Y { get; set; }

    [Parameter]
    public bool IsBase { get; set; }

    [Parameter]
    public bool IsInError { get; set; }

    [Parameter]
    public StatusCell Status { get; set; }

    private bool _isInError;
    private StatusCell _status;

    string GetCssCell()
    {
        string res = classCss;
        if (!IsBase)
            res += $" {hoverClassCss}";
        return res;
    }

    async Task HandleRightClick()
    {
        await OnCallbackParentRightClick.InvokeAsync((X, Y));
    }

    async Task OnClickedCell(MouseEventArgs e)
    {
        if (e.Button == (long)MouseButton.Middle && Status > StatusCell.Empty)
            await OnCallbackParentMiddleCLick.InvokeAsync((X, Y));
        else
            await OnCallbackParent.InvokeAsync((X, Y));
    }

    protected override void OnParametersSet()
    {
        if (_status != Status)
        {
            switch (Status)
            {
                case StatusCell.Cross:
                    currentIcon = crossIcon;
                    break;
                case StatusCell.Circle:
                    currentIcon = circleIcon;
                    break;
                default:
                    currentIcon = string.Empty;
                    break;
            }

            _status = Status;
        }

        if (_isInError != IsInError)
        {
            _isInError = IsInError;
            classCss = "display-products";
            if (IsInError)
                classCss += " cell-error";
        }
    }
}
