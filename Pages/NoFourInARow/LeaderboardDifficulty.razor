@using Portfolio.Interfaces;
@using Portfolio.Models.Aws;
@inject ILeaderboardNoFourService LeaderboardNoFourService
@inject HttpClient Http

<Row>
    @if (fileConfig == null || fileConfig.Grids == null || leaderboard == null || leaderboard.Data == null)
    {
        <Div Display="Display.InlineBlock">
            <SpinKit Type="SpinKitType.Chase" />
        </Div>
    }
    else
    {
        @foreach (var grid in fileConfig.Grids)
        {
            <Column ColumnSize="ColumnSize.Is12.OnMobile.Is2.OnDesktop">
                <Card Margin="Margin.Is4.FromBottom">
                    <CardBody>
                        <CardTitle Size="5" TextAlignment="TextAlignment.Center">Level @grid.Index</CardTitle>
                        <CardText Margin="Margin.Is4.FromTop" TextAlignment="TextAlignment.Center">
                            @{
                                List<LeaderboardData> datas = new List<LeaderboardData>();
                                if (leaderboard.Data.ContainsKey(grid.Index))
                                    datas = leaderboard.Data[grid.Index];
                                if (datas == null || datas.Count <= 0)
                                {
                                    <Paragraph Italic>N/A</Paragraph>
                                }
                                else
                                {
                                    int i = 1;
                                    foreach (var player in datas.OrderBy(x => x.Seconds).Take(3))
                                    {
                                        int index = i;
                                        <Paragraph>
                                            <Div Flex="Flex.JustifyContent.Around">
                                                <Text>
                                                    Top @index
                                                </Text>
                                                <Text TextColor="@(index == 1 ? TextColor.Success : index == 2 ? TextColor.Warning : TextColor.Info)" TextWeight="TextWeight.Bold">
                                                    <Text TextTransform="TextTransform.Capitalize">
                                                        @player.Name: 
                                                    </Text>
                                                    <Text>
                                                        @($"{player.Seconds / 60:00}:{player.Seconds % 60:00}")
                                                    </Text>
                                                </Text>
                                            </Div>
                                        </Paragraph>
                                        i += 1;
                                    }
                                }
                            }
                        </CardText>
                    </CardBody>
                </Card>
            </Column>
        }
    }
</Row>

@code {
    [Parameter]
    public int DifficultyParameter { get; set; }

    Difficulty Difficulty;
    FileConfigNoFourInARow fileConfig;
    LeaderboardGet leaderboard;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Load();
            StateHasChanged();
        }
    }


    protected override void OnParametersSet()
    {
        Difficulty = (Difficulty)DifficultyParameter;
    }

    async Task Load()
    {
        string resFile = $"nofourinarow/{Difficulty.GetDifficultyPath()}/grids.json";
        var taskLeaderboard = LeaderboardNoFourService.GetFromJsonAsync<LeaderboardGet>($"/leaderboard/{DifficultyParameter}");
        fileConfig = await Http.GetFromJsonAsync<FileConfigNoFourInARow>(resFile);
        leaderboard = await taskLeaderboard;
    }
}
